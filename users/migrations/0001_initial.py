# Generated by Django 5.1.3 on 2024-11-20 18:55

import django.core.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the user', primary_key=True, serialize=False)),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, help_text='Required. The email address will be used for logging in.', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='email address')),
                ('first_name', models.CharField(blank=True, help_text="User's first name", max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, help_text="User's last name", max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active.', verbose_name='active')),
                ('email_verified', models.BooleanField(default=False, help_text='Designates whether this user has verified their email address.', verbose_name='email verified')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time when the user joined', verbose_name='date joined')),
                ('last_login', models.DateTimeField(blank=True, help_text="Date and time of the user's last login", null=True, verbose_name='last login')),
                ('last_password_change', models.DateTimeField(blank=True, help_text='Date and time of the last password change', null=True, verbose_name='last password change')),
                ('failed_login_attempts', models.PositiveIntegerField(default=0, help_text='Number of consecutive failed login attempts', verbose_name='failed login attempts')),
                ('lockout_until', models.DateTimeField(blank=True, help_text='Timestamp until when the user is locked out', null=True, verbose_name='lockout until')),
                ('password_changed_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the password was last changed', verbose_name='password changed at')),
                ('require_password_change', models.BooleanField(default=False, help_text='Indicates if the user must change their password on next login', verbose_name='require password change')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-date_joined'],
                'indexes': [models.Index(fields=['email'], name='users_user_email_6f2530_idx'), models.Index(fields=['date_joined'], name='users_user_date_jo_064c8f_idx')],
            },
        ),
    ]
